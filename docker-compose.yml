services:
  django:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      network: host
    volumes:
      - ./backend:/app
    command: >
      sh -c "python manage.py makemigrations  &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - mongo
      - rabbitmq

  bot:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      network: host
    volumes:
      - ./backend:/app
    env_file:
      - .env
    command: python /app/telegram_bot/bot.py
    depends_on:
      - db
      - rabbitmq
      - mongo


  celery:
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    volumes:
      - ./backend:/app
    command: celery -A tgpostman worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - django
      - rabbitmq
      - mongo

  db:
    image: postgres:17
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

volumes:
  postgres_data:
  mongo_data:
